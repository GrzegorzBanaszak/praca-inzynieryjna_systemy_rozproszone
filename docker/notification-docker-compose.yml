version: "3.9"

services:
  # ===== lokalny broker Kafka (Redpanda) =====
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda
      - start
      - --smp=1
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:9092
    ports:
      - "9092:9092" # broker (opcjonalnie do debugowania z hosta)
      - "9644:9644" # admin API
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "rpk cluster info --brokers=redpanda:9092 >/dev/null 2>&1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  # ===== NotificationService (aspnet 8) =====
  notificationservice:
    container_name: notificationservice
    build:
      context: ../src/NotificationService # <- dostosuj ścieżkę do Dockerfile, jeśli inna
      dockerfile: Dockerfile
    image: notificationservice:local
    restart: unless-stopped
    depends_on:
      redpanda:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # .NET 8 – stabilnie na porcie nieuprzywilejowanym:
      ASPNETCORE_HTTP_PORTS: "8080"
      # Kafka:
      KafkaSettings__BootstrapServers: "redpanda:9092"
      KafkaSettings__Topic: "orders"
      KafkaSettings__GroupId: "notification-service-group"
      # SMTP – atrapy/dummy (Twoja implementacja INotificationService może to logować)
      SmtpSettings__Host: "smtp.example.com"
      SmtpSettings__Port: "587"
      SmtpSettings__User: "noreply@example.com"
      SmtpSettings__Pass: "SuperTajneHaslo"
    ports:
      - "5004:8080" # HTTP (np. /healthz)
      - "9090:9090" # Prometheus metrics, jeśli w kodzie masz AddMetricServer(9090)
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== Jednorazowy producent testowy (wrzuca próbkę na topic `orders`) =====
  producer-once:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    depends_on:
      redpanda:
        condition: service_healthy
      notificationservice:
        condition: service_started
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      rpk cluster info --brokers=redpanda:9092 >/dev/null
      rpk topic create orders --brokers=redpanda:9092 >/dev/null 2>&1 || true
      echo '{"orderId":"abc-123","userEmail":"test@example.com","items":[{"sku":"X","qty":1}]}' \
        | rpk topic produce orders -b redpanda:9092 >/dev/null
      echo "Produced 1 sample message to 'orders'."
    restart: "no"
